"""
functions for natural selection data generated by msms
"""
import numpy as np

def parse_natsel(filename, num_indivs):
  num_sites_list = []
  count = 0
  print("nat sel data: parsing sequence matrices...")
  file_ = open(filename,'r')
  lines = file_.readlines()
  matrices = []
  for i in range(3,len(lines),num_indivs+4): # excluding header, moving through 25 seqs
    assert(lines[i].strip()=='//')
    num_sites = int(lines[i+1].split(' ')[1])
    num_sites_list.append(num_sites)

    if num_sites == 0: # no seg sites
      matrices.append(np.zeros((num_samples,0), dtype='int32'))
      count += 1
    else:
      matrix = []
      for j in range(num_indivs):
        str_seq = lines[i+3+j].strip()
        seq = np.array(list(str_seq), dtype='int32')
        matrix.append(seq)
      matrix = np.array(matrix)
      assert(matrix[0].shape[0]==num_sites)
      assert(matrix.shape[0]==num_indivs)
      matrices.append(matrix)
      count += 1

  file_.close()
  print("nat sel data: stats")
  print("min sites:",min(num_sites_list))
  print("max sites:",max(num_sites_list))
  print("avg sites:",sum(num_sites_list)/len(num_sites_list))

  over100 = 0
  for s in num_sites_list:
    if s > 100:
      over100 += 1
  print("over 100 sites:",over100)
  return matrices

def uniform_natsel(data, length):
  print("nat sel data: padding sequence matrices...")
  uniform_data = []
  for matrix in data:
    h, w = matrix.shape
    if w >= length:
      reduced_mat = matrix[:,:length]
      uniform_data.append(reduced_mat)
    else:
      padding_width = length-w
      zeros = np.zeros((h,padding_width), dtype='int32')
      half = int(padding_width/2)
      padded_mat = np.concatenate((zeros[:,:half],matrix,zeros[:,half:]),axis=1)
      uniform_data.append(padded_mat)
  return np.array(uniform_data)
